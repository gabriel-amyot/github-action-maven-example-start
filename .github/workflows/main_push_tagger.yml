name: Tagging

on:
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  tag:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Determine the previous version
        id: previous_version
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0)
          # Remove the "v" prefix if it exists
          PREVIOUS_VERSION=${LATEST_TAG#v}
          if [[ $PREVIOUS_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            PR_NUMBER="${{ github.event.number }}"
            NEW_TAG="v${PREVIOUS_VERSION}-dev.${PR_NUMBER}"
            echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV
          else
            echo "Error: Invalid previous version format."
            exit 1
          fi
        continue-on-error: true

      - name: Tag commits in PR
        run: |
          NEW_TAG="${{ env.NEW_TAG }}"
          git tag $NEW_TAG
          git push origin $NEW_TAG
        if: success()

      - name: Merge PR and create a release tag
        if: github.event_name == 'pull_request' && github.event.action == 'closed'
        run: |
          PREVIOUS_VERSION="${{ env.PREVIOUS_VERSION }}"
          if [ "$GITHUB_EVENT_PATH" != "" ]; then
            MERGED=$(jq -r .pull_request.merged $GITHUB_EVENT_PATH)
            if [ "$MERGED" = "true" ]; then
              git checkout master
              git pull
              git tag -a -m "Release $PREVIOUS_VERSION" "v$PREVIOUS_VERSION"
              git push origin master --tags
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
